FORMAT: 1A
HOST: https://api.whimtrip.fr/v1

# Whimtrip


# How it works

Whimtrip API is a set of multi destination API tools to **fully automatize the multi-destination trip 
creation** process.

It was designed to be as flexible as possible. As an early stage version of our API, it is possible to
**request custom features**.

Altough our API allows you to build completely custom business logic at each step, **the overall process
is quite guided** and should be the same for almost any usecase.

This API is in early release stage and if you have specific requirements, or features you would need, 
feel free to let us know by contacting us.


## Steps

 - Generate a multi-destination trip skeletton out of an input form. This skeletton will be later 
refered as a **proposition**.
 - Retrieve the itineraries page per page according to your needs. If you need **accommodation packages** 
bundled with the propositions they can be returned with the itineraries. At this step, you only have 
**price quote** and **itinerary destinations** but not much more information.
 - Generate the selected **package** for the selected **itinerary**.
 - Retrieve the **Generated trip**.
 - Customize it (**Change hotels** and much more to come).
 - Proceed to **Booking Step** (Yet only **booking tokens** forwarding is supported).

## Indications


Each generated trip is **historized** in our databases. Not only the trip is historized but 
**almost everything** that comes with it.

This means that any **generated trip** can be retrieved at any time. When retrieved, **the trip will always
be refreshed first** so that its *price can change* or its *availability can even disapear* leading to 
further described exceptions.


# General Knowledge

<a name="Authentication"></a>
## Authentication

Authentication can be provided in two different ways : 

- Using the `X-API-Key` header of your requests with your dedicated API key.
- [Authenticate](#Authenticate) and add your session token to each request in the `X-Auth-Token` header.


While the first method is much more **developer friendly**, the second one allows you to **get the most out
of our API**. In fact, if you authenticate a Whimtrip Session for each end user, you'll be able to have
**detailed data about users behavior with our API** without any further development on your side using
your backoffice access page.

Please remember that whatever is the solution you choose, your API-Key shall remain **entirely private**
and **shouldn't be used directly in any front-end application** but hidden in server-side computing.

For very particular use cases where you must use our API directly in your front-end app, we recommend
you use a **3rd authentication method** we developped internally. Please contact us directly if you need 
more information about it.

## Default Headers

There are a few general purpose headers you shall use anywhere or almost anywhere :

- `X-Auth-Token`  :  Put your user **session token** here.
- `X-API-Key` : Put your **API key** here (only if `X-Auth-Token` header isn't used).
- `Content-Type` : You should set it to `application/json` for each `POST`, `PUT`, `PATCH` and `DELETE`
request.
- `Accept-Language` : Set your **locale** here. Currently, only `FR` and `EN` are fully supported. While 
we support more locales, our geographical content and errors is not fully translated yet. Please contact
us if you need more locales support.
- `X-Forwarded-For` : Set the end user ip address it was forwarded for here. If enabled, this will help us
identify returning users (This works coupled with the `User-Agent` header).
- `User-Agent` : Set the end user **user-agent** of its browser to help us identify returning customers. If 
correctly done, this will give you better understanding of the statistical data we collect.


## GDPR Compliance

As a french company, we take GDPR compliance very seriously. We are committed to be as transparent 
about our processings as possible. 

We've stated in the two above sections that we use the end user ip address as well as its User-Agent
header in order to identify them as uniquely as possible. Further more, we also stated that using 
session authentication can help you leverage the true power of our API. Yet, **those information are 
personal informations** and we are not entitled to handle them that easily or at least we don't want to do
so. 

*Does that mean you shouldn't forward us ip addresses and User-Agent header ?* Well not exactly, this 
simply mean we have to handle them carefully. We ask our developers to **remove the last byte 
of the ip address** of the end user or replace it with a `0`. If you don't do it, we will in any case 
replace it with `0`. Given the three first byte of an ip address, the location of their real world issuer
is so wide that **it cannot be mapped back to a unique user** or family. Not even with the User-Agent
header.

This imply that we can still identify returning users in most cases but without being able to identify
them, and without the help of any kind of cookie or user stored data. Of course, this  method doesn't 
work as well as the cookie method that Google Analytics uses for example, but it does give great 
aggregated measures for correctly understanding your usage of our API.


## CORS

Our API supports [**CORS standard**](https://fr.wikipedia.org/wiki/Cross-origin_resource_sharing).
The `Origin` header can be used to set up the origin of the request. The request won't be accepted if 
the origin is not part of the origins you added from your developper office. By default, all 
origins are accepted.

You can also limit the ips that are allowed to use your API-key in your account settings.

## Set-Up   

The Set-Up process is quite simple, you shall create a Developper account [here](https://developer.whimtrip.fr).

***Please note that this feature is not yet supported and developer have to go through a manual 
account creation process by contacting us directly.***

You will then be able to **create and add API keys** through your account page and setup the access rights
for it *(ips allowed, origins allowed, api call limits if any...)*.

Altough the first setup is quite simple, **it won't give you access to accommodations related endpoints**. In fact, 
we use Booking.com API to provide us with hotel real time data and **they strictly forbidden data forwarding**. Those
feature will be enabled for you as soon as **we will have installed your own hotel databases / API** so that we'll
be able to fetch and process your hotel instead of Booking.com's API's data.

## Response Template

All of our 2xx responses body follow the same scheme described below :



         {
          
            "status": "SENT",
            "httpStatus": 200,
            "tokenExpiration": "05/29/2018 17:05:52.7260+00:00",
            "apiCallId": 9095,
            "contents": {
                // Some Object(s)
            }  
            
    }
    

Please note that the `tokenExpiration` field won't show up if you use session less authentication.

`apiCallId` can be used for debug purposes. You can submit us manually the API call id in case of any
internal server error for us to better understand it. Additionally, we designed an endpoint for automatic
exception reporting. Please contact us if you are interested in it.

`contents` might contains a JSON object or array depending on the endpoint.

Even though we send you `httpStatus` param, we still use real Http Status and the HttpStatus is the one
that should be checked whatsoever happens.


## Errors

Errors are 4xx or 5xx HTTP status code responses. They will always follow the same structure :
            
        {
    
            "status": "FAILED",
            "httpStatus": 404,
            "tokenExpiration": "05/29/2018 17:32:46.1920+00:00",
            "apiCallId": 9096,
            "errorDetails": {
                "canonicalError": "_error_trip_not_mocked",
                "errorValue": "This isn't a trip proposition results list. Did you modified manually the URL?"
            }
                        
    }

Except for `errorDetails` and disapearance of `contents` in the payload, this is the same schema as
with 2xx responses.

`canonicalError` contains the error code and `errorValue` contains the localized error message that
can be prompted to the end user directly. The locale is the one submitted with the `Accept-Language`
header.

For validation errors 4xx, there are additionnal information in the `errorDetails` object :

    {
            
        "status": "FAILED",
        "httpStatus": 404,
        "tokenExpiration": "05/29/2018 17:32:46.1920+00:00",
        "apiCallId": 9096,
        "errorDetails": {
            "canonicalError": "_error_any_validation_failed",
            "errorValue": "Submitted form contains validation errors, please review it",
            "errors": [
                {
                    "canonicalError": "_error_trip_wrong_from_date",
                    "fieldConcerned": "fromDate",
                    "errorValue": "Departure date cannot be in the past"
                },
                {
                    "canonicalError": "_error_trip_wrong_to_date",
                    "fieldConcerned": "toDate",
                    "errorValue": "Return date cannot be in the past"
                }
            ]
        }
    }
    
    
    
The `fieldConcerned` field describe the input property that led to this exception.

Currently, validations errors are not properly handled in `GET` query parameters and generally in all URL 
query parameter because they are processed in a different way. This problem will be addressed soon in 
order to provide a better understanding of those errors.

Similarly badly typed enumeration values leads to validation errors with nearly no information to correct
it. This shall be addressed soon as well.
    
## Errors Status Code

- `400 - Bad Request` indicates a **validation error**
- `401 - Unauthaurized` indicates that this **request cannot be authorized**. This might be because of your
API key, the issuer of the request, an eventual login failure, a forbidden domain, a bad token or an 
expired token or because you are not connected.
- `403 - Forbidden` indicates a **blacklisted ip** or a **lack of right** to access an endpoint. 
Additionnally, this might refer to  **any forbidden action** such as trying to access to a trip 
without owning it.
- `404 - Not Found` indicates that **the required resource wasn't found** or that the corresponding search
didn't yield any result.
- `406 - Not Acceptable` indicates that the **Content-Type requested isn't available**. Currently, only
`Content-Type : application/json` is supported and `JSON` is the ony output format available. We plan
to add soon enough the possibility to interact with our API using `XML` schemas.
- `410 - Gone` indicates that the requested **resource is not anymore available**. This might also indicate
that the action cannot be performed anymore. Retrying the request will yield the exact same status code.
- `422 - Unprocessable Entity` indicates that the entity submitted or request submitted **isn't valid**.
While this might sound pretty much **similar to a validation error**, those errors usually occures in 
deeper parts of the checking process after the easy validation itself. Most of the time, this require 
a pre-processing before being able to trigger it and this is the reason why it cannot be done as a 
part of the validation process.
- `429 - Too Many Requests` indicates that you hit your **daily API limit** or that you performed 
**too many request simultaneously**.
- `5xx - Internal Server Error` indicates that an **unknown error** occured on our side. This error will 
be logged in our database in order for us to correct it as soon as possible. However, you can send us more
detailed information if you wish by **contacting us with the provided error response** and a description 
of what you were doing at the moment the exception occured. We will do our best to correct those errors as
soon as possible and to carefully unit test their behavior.

## REST

We strongly believe in the beauty and clarity of REST protocol. Our whole API is based as much as possible
on [REST protocol](https://fr.wikipedia.org/wiki/Representational_state_transfer). You can check the wiki
article if you are not familiar with it yet.


## Content Caching

*This part of the documentation is not yet ready.*

## Images Content

*This part of the documentation is not yet ready.*


# Concepts

## Accommodation Pakages

While we won't get into all the details of the packaging system, you have to know the basics of how it all work.
Given a destination and the dates to find a package for, we want to find a package that includes **one or more hotels
in a reasonable price range**.
 
To do so, we pick the **cheapest hotel** corresponding to **user query** and then try to find other accommodation bookings
at similar prices. We then take the **highest price of those accommodation bookings** and set it as the **price for all
of the accommodation booking comprised in the package**. This means that the margin is **even greater** using this method
all the while preserving **very interesting prices**. In any package, there must be **at least one hotel** but there is no
upper limit on the quantity of hotels it can hold.

# Object Structures

<a name="Journey"></a>
## Journey

We will focus here first on the`Journey` object.
```
{

    "id": 6337,
    "toPlace": { 
        // ... The destination object (similar from all other destination objects in this API) 
     },
    "actualJourneyInd": 0,
    "duration": 3,
    "price": 663.45,
    "fromDate": "06/08/2018",
    "toDate": "06/11/2018",
    "path": { 
        // ... The mean of transportation for this journey 
    },
    "accommodationBooking": { 
        // ... Some accommodation booking 
    },
    "accommodationPackagesQuote": { 
        // ... Some accommodation package quote 
    },
    "alternativeAccommodationBookings": [
        // ... some accommodation bookings 
    ]    
}
```

Each journey has a **unique `id`** that you will use later on to **refer to it**. It also has a `toPlace` destination. 
We do not show the `fromPlace` destination here because it is supposed to be found in the previous journey `toPlace`.
For the first journey of the itinerary altough, the `fromPlace` can be retrieved from the request object itself. 



After that, you will find some **basic information about the journey** : the `actualJourneyInd` is the index of the 
journey in the itinerary. Here, as you can see this is the first journey of the trip. The duration of the journey
counts the **number of nights stay** in `toPlace`. The price is the **total price of the journey** for all passengers 
and sums both the choosen accommodation booking price and the price of the mean of transportation. `fromDate` and 
`toDate` indicates both the starting and ending date of the journey.

The journey then have a `path` which will contain **the mean of transportation used**. Yet, only flights are supported 
but we plan to introduce trains, buses or car rental at some point. The path describes **how you get from `fromPlace`
to `toPlace`**. The destination you will visit and stay in during your journey is the one mentionned in the`toPlace`
field. Thus, **the last journey only contains a return path** but no accommodation booking or any accommodation related
element. 


### Mean Of Transportation

We will further describe the path entity here :
```
{

    "id": 8175,
    "fromDate": "06/08/2018 00:00",
    "toDate": "06/08/2018 00:00",
    "price": 1298,
    "type": "FLIGHT",
    "distanceTravelled": 5615,
    "quoteCreatedAt": "05/31/2018 08:52:46.0000+00:00",
    "cache": true,
    "quoteDatetime": "05/31/2018 08:52:46.0000+00:00",
    "companies": [
        {
            "id": 122,
            "name": "Aegean Airlines",
            "iataCode": "A3",
            "type": "AIRLINE",
            "rawLogoUrl": "https://s1.apideeplink.com/images/airlines/A3.png",
            "companyClass": "UNKNOWN"
        }
    ],
    "durationInMinutes": null,
    "flightExtension": {
         "id": 658,
         "stops": [
               {
                   "id": 1,
                   "toAirport": {
                       "id": 1206,
                       "name": "Eleftherios Venizelos International Airport",
                       "iata": "ATH",
                       "translatedName": "Aéroport Eleftherios Venizelos International"
                   },
                   "fromDate": "05/17/2018 16:40",
                   "toDate": "05/17/2018 20:50",
                   "carrier": {
                       "id": 122,
                       "name": "Aegean Airlines",
                       "iataCode": "A3",
                       "type": "AIRLINE",
                       "rawLogoUrl": "https://s1.apideeplink.com/images/airlines/A3.png",
                       "companyClass": "UNKNOWN"
                   },
                   "duration": 250
               }
         ],
         "fromAirport": {
               "id": 1186,
               "name": "Paris-Orly Airport",
               "iata": "ORY",
               "translatedName": "Aéroport Paris-Orly"
         },
         "toAirport": {
               "id": 1331,
               "name": "Antalya International Airport",
               "iata": "AYT",
               "translatedName": "Aéroport Antalya International"
         },
         "apiCompany": "KIWI"
     },
    "transportationClass": "ECONOMY",
    "ticketType": "MULTIDESTINATION_MASTER_TICKET",
    "bookingAgent": {
        "id": 31,
        "name": "Kiwi",
        "rawLogoUrl": "https://www.kiwi.com/images/logos/kiwicom/navbar.png"
    },
    "bookingSession": {
        "id": 2015,
        "origin": "KIWI",
        "createdAt": "05/31/2018 08:52:46.0000+00:00",
        "agent": {
            "id": 31,
            "name": "Kiwi",
            "rawLogoUrl": "https://www.kiwi.com/images/logos/kiwicom/navbar.png"
        },
        "price": 1298,
        "valid": true,
        "refreshable": false,
        "expiresAt": "05/31/2018 10:52:46.0000+00:00",
        "modifiable": false,
        "expired": false
    }
}
```

In this object, we want to further explain three main elements : The `flightExtension` field which contains
information **about the flight itself**. As mentionned earlier, we plan to add support for more type of means of 
transportation. That's why there is a nested specific object containing **flight details**. Yet, it displays, `fromAirport`
and `toAirport` as well as `stops` fields. Then there is also the ticket type you might want to pay attention to.
`MULTIDESTINATION_MASTER_TICKET` means that **this is the first ticket of the multi destination trip** but also that
**it holds the price for the whole itinerary** (the other flight prices will have a value of 0). 

The booking agent refers to where you **should purchase your bookings** and where we will redirect your users for the
payment. As we also **provide the booking tokens directly**, this also means that you can **purchase them directly** 
for your end-user via our data provider. Yet, for flights, we only use **Kiwi datas**. Finally, you will find a 
`bookingSession` object. This object reflect the **state of the session** for booking the corresponding flight. This
object is also used accros all entities that can be booked, so accommodations are concerned as well. Each booking 
session hold parameters describing **how you should interact with it**. Once a session is expired, it must be refreshed
(if supported, use `refreshable` field to know if this is the case) **with no liability that the price will remain the
same once refreshed**.


### Accommodations

<a name="Accommodation"></a>
#### Accommodation Booking

The last three fields are related to **the accommodation part** of the trip. The first one of them is the actually
choosen accommodation booking. We will deep dive into its structure now to understand what it contains.

```
{

    "id": 138,
    "accommodation": {
        "accommodation": {
        "id": 7905,
        "origin": "BOOKING",
        "name": "Harrington Park Resort",
        "latitude": 36.86019,
        "longitude": 30.63321,
        "starRating": 7.4,
        "reviewsNumber": 538,
        "url": "https://www.booking.com/hotel/tr/harrington-park-resort.html",
        "description": "Located on Konyaalti Beach, Harrington Park Resort offers..", // and so on and so forth
        "params": {
            "prefered": true,
            "importantInformation": "",
            "welcomeMessage": "Our hotel is located on the most of beatiful and Antalya’s...", // and so on and so forth
            "facilities": [
                "Parking",
                "Restaurant",
                "Room service",
                ...
            ]
        },
        "address": "Gursu Mahallesi Akdeniz Bulvari 192 Sokak Konyaalti",
        "zip": "07070",
        "currency": "EUR",
        "hotelClass": 5,
        "photographyHolder": {
            "id": 42151,
            "photographies": [
                {
                    "id": 368736,
                    "type": "LANDSCAPE",
                    "origin": "BOOKING",
                    "originalWidth": 1024,
                    "originalHeight": 1024,
                    "latitude": 36.8602,
                    "longitude": 30.6332,
                    "attribution": {
                        "id": 365338,
                        "sourceProvider": "booking.com",
                        "sourceName": "booking.com",
                        "url": null,
                        "license": null,
                        "authorUrl": "booking.com",
                        "author": "booking.com",
                        "title": "Harrington Park Resort photography 1_300",
                        "licenseUrl": null
                    },
                    "multisized": false,
                    "pathRelative": false,
                    "path": "https://aff.bstatic.com/images/hotel/max1024x768/855/85501741.jpg"
                }
            ]
        },
        "distanceToCityCenter": 7.1454754
    },
    "price": 5040,
    "quoteDateTime": "02/03/2018 21:36",
    "roomBookings": [
        {
            "id": 163,
            "price": 2520,
            "passengers": [
                {
                    "id": 89,
                    "age": 21
                },
                {
                    "id": 90,
                    "age": 21
                }
            ]
        },
        {
            "id": 164,
            "price": 2520,
            "passengers": [
                {
                    "id": 91,
                    "age": 21
                },
                {
                    "id": 92,
                    "age": 21
                }
            ]
        }
    ],
    "commonRoomBlock": {
        "id": 141,
        "room": {
            "id": 139,
            "roomSurfaceInSquareMeters": 75,
            "name": "Suite with Terrace",
            "description": "Suite with mountain views offers air-conditioning...", // some more text here
            "photographyHolder": {
                "id": 49808,
                "photographies": [
                    {
                        "id": 449406,
                        "type": "LANDSCAPE",
                        "origin": "BOOKING",
                        "originalWidth": 1024,
                        "originalHeight": 1024,
                        "latitude": 36.8602,
                        "longitude": 30.6332,
                        "attribution": {
                            "id": 446010,
                            "sourceProvider": null,
                            "sourceName": "booking.com",
                            "url": null,
                            "license": null,
                            "authorUrl": null,
                            "author": null,
                            "title": "1_500",
                            "licenseUrl": null
                        },
                        "multisized": false,
                        "pathRelative": false,
                        "path": "https://aff.bstatic.com/images/hotel/max1024x768/774/77420032.jpg"
                    }
                ]
            },
            "bedroomsCount": 1,
            "bathroomsCount": 1
        },
        "maxOccupancy": 2,
        "maxChildrenFree": 1,
        "maxChildrenFreeAge": 6,
        "mealPlan": "NONE",
        "breakfastIncluded": true,
        "refundable": true
    },
    "pageNumber": 0,
    "roomsNumber": 2,
    "deeplink": "https://www.booking.com/hotel/tr/harrington-park-resort.html?aid=1312052&checkin=2018-04-15&checkout=2018-04-22&room_1=A,A,A,A",
    "pricingExpired": true
}

```


This data structure is **completely localized** according to what you specified in your `Accept-Language` header. 
It first contains the **`accommodation` the end-user will stay in**. Then, there are two more objects you should 
pay attention to. The `roomBookings` object describe how we **mapped passengers to rooms**. This is essential when 
dealing with complex passenger list. The last object here is the`commonRoomBlock` object which describes the **room 
choosen**. Yet, we don't support mapping passengers to different rooms to optimize their pricing but this is a feature 
we are looking toward to integrate in a near future. Also, please note that the `mealPlan` field is an enumeration 
that can take those values : {`NONE`, `HALF_BOARD`, `FULL_BOARD`, `ALL_INCLUSIVE`}.


#### Alternative Accommodations

This array contains **other accommodation bookings** you might choose a booking from. There will always be **3
results** in this array, except if you are on the last page (in this case there might be less than 3 accommodation 
bookings).

Alternative Accommodations are **not always included** in the package and their price should be **checked against** the 
choosen accommodation booking (`accommodationBooking` field). Their price **might even be lower** than the
`accommodationBooking` price if the choosen accommodation was already modified previously. 

Alternative Accommodations is a **paginated array** for which you always receive the **first page** when using the`GET` 
trip endpoint. There are dedicated endpoints to **see the other pages** of those alternative accommodations or to
replace the choosen `accommodationBooking` by one of the `accommodationBooking` in this array.

#### Accommodation Packages Quote


The last element we will describe here is the `accommodationPackagesQuote` object. It will will give you information 
on **how to query alternative accommodations**. For each available package, it will give its **price** as well as the
**number of accommodation booking's pages** you can query that matches your original search query. In the below example,
the city was a very popular one and there weren't any filter on the accommodations. This explains the very large amount 
of pages for each package. Each page contains 3 accommodationBookings.
```               
{

    "id": 35,
    "onBudgetQuote": {
        "category": "ON_BUDGET",
        "price": 27.19,
        "pageCount": 37
    },
    "threeStarsQuote": {
        "category": "THREE_STARS",
        "price": 44.32,
        "pageCount": 52
    },
    "fourStarsQuote": {
        "category": "FOUR_STARS",
        "price": 85,
        "pageCount": 32
    },
    "fiveStarsQuote": {
        "category": "FIVE_STARS",
        "price": 104.31,
        "pageCount": 12
    }
}
```               
               

<a name="Authenticate"></a>
## Authenticate [/authenticate]


This endpoint will allow you to issue a session token for a single end-user. The retrieved token can
be used in the `X-Auth-Token` header in each concerned requests. For detailed information about the 
different authentication scheme we provide, you can refer to [this part](#Authentication).

### Authenticate [POST] 


+ Request (application/json)

        {
            "key": "YOUR_API_kEY"
        }

+ Response 200 (application/json)

        {
            "status": "SENT",
            "httpStatus": 201,
            "tokenExpiration": "05/29/2018 23:34:50.3220+00:00",
            "apiCallId": 9105,
            "contents": {
                "token": "eyJzdCI6Ik5qRXpNRE09LU9EZ3pOemc9LU1USTVNZz09LVVETXZiRGxCIiwiaWQiOiJRMjFWUyJ9"
            }
        }
        
           

### Itineraries Generation [/trip/multidestination/generate]
<a name="Generation"></a>
The propositions endpoints are the entry point of the trip automation process. They contain two steps.
The first one consist in submitting the trip creation form. This is the step described below. And the
second one will be about retrieving the generated multi-destination trips itineraries. This will be covered
just after the generation endpoint.

To simplify the user input form, we recommend making usage of default value. Here is how we dit this for example :
![alt text](https://image.ibb.co/dRirqy/Screenshot_from_2018_05_31_11_09_00.png "Simplified form" )

It is written in french, but as you can see, we only have **the departure place, the destination and the start date** of 
the trip. We then have a **`More Parameters`** button to add more filters to the search. The **duration is defaulted to
10 days** so that the user doesn't have to type in its return date, the number of destinations is **defaulted to 3**, the
departure place is set directly using the end-user ip address geo location. Finally, the passengers are defaulted
to **two adults**. This really simplify the form a lot and **make it easy to fill out** for the end user.

### Generate Itineraries Matching Your Request  [POST]

+ Request (application/json)
    + Attributes (TripRequest)

+ Response 201 (application/json)
    
    {
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 20:20:32.9850+00:00",
        "apiCallId": 9115,
        "contents": {
            "proposition": {
                "propositionId": 542,
                "pagesCount": 4
            }
        }
    }
    
### Retrieving Itineraries [/trip/multidestination/{propositionId}{?withAccommodationPackages,page}]

For this endpoint, you will **need to use the `propositionId`** you gathered during the **previous generation API call**. 
The page count of the previous response can also be useful altough pagination information are also precised in this
endpoint response while we ensure that there is **at least one page** in any case. This means that checking the pages 
count from the previous API call is not required but it all depends on how you integrate our API.

At this stage, and if you set the `withAccommodationPackages` parameter to `true` (see the Example panel for more 
information about this parameter), you will get the prices for different types of packages. Available packages are
sorted amongst 4 categories : `ON_BUDGET`, `THREE_STARS`, `FOUR_STARS` and `FIVE_STARS`. 

Each itinerary contains the **price of the flight only itinerary** as well as the **accommodation packages prices**.
Displayed packages prices are **hotels only prices** so that the full real price should be **the sum of both the flight
only and the hotels only prices.**

Prices are summed up **for all passengers**. This means that what we return **is not the price per passenger** but 
instead the **total price for all passengers**. This is true for all of our endpoints except otherwised mentionned.

We've decided that itineraries should be polled by page and that **each page should contain up to 5 itineraries** 
(it will contain 5 or less itinerary on the last page of results). This decision was made because of the underlying 
prerequisites on Booking API. If we use your own hotel database, we might agree on a custom page size if you need 
this feature.

+ Parameters
    + propositionId: 542 (required, number) - The id of the proposition returned in the [generation endpoint](#Generation).

    + withAccommodationPackages: true (optional, boolean) - Wether you want to **activate the accommodation packages** feature here
     or not. This will give you the prices of the different packages available. <br/>
     
     If you used the tag `ON_BUDGET` or `COMFORT` in your generation request, this will **limitate the types of packages** 
     generated (no 4* and 5* with `ON_BUDGET` tag and no budget hotel with `COMFORT` tag). <br/> 
     
     Polling the accommodation prices can take up some time for us (up to two more seconds of processing) and is computing 
     intensive for us. If you don't need the accommodation packages here, we **strongly recommend** you set this parameter
     to false in order to have far quicker responses. There is another way to retrieve it later using 
     [another endpoint](#GetItinerary).
     
    + page: 0 (optional, number) - By default, it will be set to 0. Pagination starts at 0 and the max page number you can fetch 
      is indicated in the [generation endpoint](#Generation) response `pagesCount` parameter. As the pagination start 
      at index 0, the max page index you can fetch is equal to *`pagesCount - 1`*.
     
### Retrieve Generated Itineraries [GET]
    
+ Response 200 (application/json)
    
    {
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 20:49:47.4950+00:00",
        "apiCallId": 9116,
        "contents": {
            "propositionId": 542,
            "request": {
                "id": 486,
                "customTag": null,
                "fromDate": "06/08/2018",
                "toDate": "06/18/2018",
                "moreJourneys": false,
                "passengers": [
                    {
                        "id": 630,
                        "age": 19
                    }
                ],
                "fromPlace": {
                    "id": 1132,
                    "name": "Paris",
                    "countryId": "FR",
                    "countryName": "France",
                    "translatedName": "Paris",
                    "translatedCountryName": "France",
                    "photographyHolder": {
                        "id": 638,
                        "photographies": [
                            {
                                "id": 500131,
                                "type": "LANDSCAPE",
                                "origin": "SELF_HOSTED",
                                "originalWidth": 960,
                                "originalHeight": 540,
                                "latitude": null,
                                "longitude": null,
                                "attribution": {
                                    "id": 500131,
                                    "sourceProvider": "Pixabay",
                                    "sourceName": "Pixabay",
                                    "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                    "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                    "author": "daviddeolindo22 / 1 image",
                                    "title": "Eiffel Tower Lovely Photo",
                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                },
                                "multisized": true,
                                "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                "pathRelative": true,
                                "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                            },
                            // Some more photographies
                        ]
                    }
                },
                "toPlace": {
                    "id": 1132,
                    "name": "Paris",
                    "countryId": "FR",
                    "countryName": "France",
                    "translatedName": "Paris",
                    "translatedCountryName": "France",
                    "photographyHolder": {
                        "id": 638,
                        "photographies": [
                            {
                                "id": 500131,
                                "type": "LANDSCAPE",
                                "origin": "SELF_HOSTED",
                                "originalWidth": 960,
                                "originalHeight": 540,
                                "latitude": null,
                                "longitude": null,
                                "attribution": {
                                    "id": 500131,
                                    "sourceProvider": "Pixabay",
                                    "sourceName": "Pixabay",
                                    "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                    "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                    "author": "daviddeolindo22 / 1 image",
                                    "title": "Eiffel Tower Lovely Photo",
                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                },
                                "multisized": true,
                                "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                "pathRelative": true,
                                "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                            }
                        ]
                    }
                },
                "createdAt": "05/30/2018",
                "regenerated": false,
                "flexibleDates": false,
                "destinationsCount": 3,
                "mustUseDestinations": [],
                "region": "ASIA",
                "requestTags": [],
                "passengersCount": 1,
                "tripDuration": 10,
                "family": false
            },
            "pagesCount": 4,
            "itineraries": {
                "results": [
                    {
                        "id": 21,
                        "journeys": [
                            {
                                "id": 6633,
                                "toPlace": {
                                    "id": 2381,
                                    "name": "Phuket",
                                    "countryId": "TH",
                                    "countryName": "Thailand",
                                    "translatedName": "Phuket",
                                    "translatedCountryName": "Thaïlande",
                                    "photographyHolder": {
                                        "id": 1322,
                                        "photographies": [
                                            {
                                                "id": 604108,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 480,
                                                "originalHeight": 270,
                                                "latitude": 8.1132,
                                                "longitude": 98.3169,
                                                "attribution": null,
                                                "multisized": false,
                                                "pathRelative": true,
                                                "path": "uploads/images/small/NEGioHzsW5.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 0,
                                "duration": 3,
                                "fromDate": "06/08/2018",
                                "toDate": "06/11/2018"
                            },
                            {
                                "id": 6634,
                                "toPlace": {
                                    "id": 2375,
                                    "name": "Chiang Rai",
                                    "countryId": "TH",
                                    "countryName": "Thailand",
                                    "translatedName": "Chiang Rai",
                                    "translatedCountryName": "Thaïlande",
                                    "photographyHolder": {
                                        "id": 1319,
                                        "photographies": [
                                           {
                                                "id": 604100,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 480,
                                                "originalHeight": 270,
                                                "latitude": 19.9523,
                                                "longitude": 99.8829,
                                                "attribution": null,
                                                "multisized": false,
                                                "pathRelative": true,
                                                "path": "uploads/images/small/CbGFkMyS5z.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 1,
                                "duration": 4,
                                "fromDate": "06/11/2018",
                                "toDate": "06/15/2018"
                            },
                            {
                                "id": 6635,
                                "toPlace": {
                                    "id": 2372,
                                    "name": "Bangkok",
                                    "countryId": "TH",
                                    "countryName": "Thailand",
                                    "translatedName": "Bangkok",
                                    "translatedCountryName": "Thaïlande",
                                    "photographyHolder": {
                                        "id": 1316,
                                        "photographies": [
                                            {
                                                "id": 500341,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 960,
                                                "originalHeight": 540,
                                                "latitude": null,
                                                "longitude": null,
                                                "attribution": {
                                                    "id": 500341,
                                                    "sourceProvider": "Pixabay",
                                                    "sourceName": "Pixabay",
                                                    "url": "https://pixabay.com/en/https://pixabay.com/fr/grand-palace-wat-phra-kaew-bangkok-1822487/",
                                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                                    "authorUrl": "pixabay.com",
                                                    "author": "",
                                                    "title": "Https://pixabay.com/fr/grand Palace Wat Phra Kaew Bangkok",
                                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                                },
                                                "multisized": true,
                                                "largePath": "uploads/images/large/mX3ufxb5yU.jpg",
                                                "pathRelative": true,
                                                "mediumPath": "uploads/images/medium/mX3ufxb5yU.jpg",
                                                "smallPath": "uploads/images/small/mX3ufxb5yU.jpg",
                                                "thumbnailPath": "uploads/images/thumbnail/mX3ufxb5yU.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 2,
                                "duration": 3,
                                "fromDate": "06/15/2018",
                                "toDate": "06/18/2018"
                            },
                            {
                                "id": 6636,
                                "toPlace": {
                                    "id": 1132,
                                    "name": "Paris",
                                    "countryId": "FR",
                                    "countryName": "France",
                                    "translatedName": "Paris",
                                    "translatedCountryName": "France",
                                    "photographyHolder": {
                                        "id": 638,
                                        "photographies": [
                                            {
                                                "id": 500131,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 960,
                                                "originalHeight": 540,
                                                "latitude": null,
                                                "longitude": null,
                                                "attribution": {
                                                    "id": 500131,
                                                    "sourceProvider": "Pixabay",
                                                    "sourceName": "Pixabay",
                                                    "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                                    "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                                    "author": "daviddeolindo22 / 1 image",
                                                    "title": "Eiffel Tower Lovely Photo",
                                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                                },
                                                "multisized": true,
                                                "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                                "pathRelative": true,
                                                "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                                "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                                "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 3,
                                "duration": 0,
                                "fromDate": "06/18/2018",
                                "toDate": "06/18/2018"
                            }
                        ],
                        "price": 1078,
                        "accommodationPackageQuote": {
                            "id": 206,
                            "onBudgetQuote": 121.05,
                            "threeStarsQuote": 167.77,
                            "fourStarsQuote": 234.54001,
                            "fiveStarsQuote": null
                        }
                    },
                    // 4 more itineraries
                ],
                "totalResultsCount": 20,
                "remainingCount": 15,
                "offset": 0,
                "resultsCount": 5
            }
        }
    }    
 
### Retrieve an Itinerary [/trip/multidestination/itinerary/{itineraryId}] 
<a name="GetItinerary"></a>
This step **can be bypassed** and is useful almost only for **front-end direct integration**. You might want to skip
directly to the next section.

When you've retrieved the itineraries with or without the accommodation packages bind to it, you might want to gather an
itinerary **alone** with its accommodation packages. That is what this endpoint can do and this definitely can facilitate
your integration if you have a page to display the trip information where the user still have to select its package
choice. This can also be used to query the accommodation packages only when needed for a single itinerary instead of
the whole itineraries result set.

+ Parameters
    + itineraryId: 21 (required, number) - The itinerary id you want to retrieve.

### Retrieve an Itinerary [GET]

+ Response 200 (application/json)

    {
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 22:47:47.2620+00:00",
        "apiCallId": 9120,
        "contents": {
            "itinerary": {
                "id": 41,
                "journeys": [
                    {
                        "id": 6713,
                        "toPlace": {
                            "id": 2372,
                            "name": "Bangkok",
                            "countryId": "TH",
                            "countryName": "Thailand",
                            "translatedName": "Bangkok",
                            "translatedCountryName": "Thaïlande",
                            "photographyHolder": {
                                "id": 1316,
                                "photographies": [
                                    {
                                        "id": 500341,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 960,
                                        "originalHeight": 540,
                                        "latitude": null,
                                        "longitude": null,
                                        "attribution": {
                                            "id": 500341,
                                            "sourceProvider": "Pixabay",
                                            "sourceName": "Pixabay",
                                            "url": "https://pixabay.com/en/https://pixabay.com/fr/grand-palace-wat-phra-kaew-bangkok-1822487/",
                                            "license": "CC0 1.0 Universal (CC0 1.0)",
                                            "authorUrl": "pixabay.com",
                                            "author": "",
                                            "title": "Https://pixabay.com/fr/grand Palace Wat Phra Kaew Bangkok",
                                            "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                        },
                                        "multisized": true,
                                        "largePath": "uploads/images/large/mX3ufxb5yU.jpg",
                                        "pathRelative": true,
                                        "mediumPath": "uploads/images/medium/mX3ufxb5yU.jpg",
                                        "smallPath": "uploads/images/small/mX3ufxb5yU.jpg",
                                        "thumbnailPath": "uploads/images/thumbnail/mX3ufxb5yU.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 0,
                        "duration": 3,
                        "fromDate": "06/08/2018",
                        "toDate": "06/11/2018"
                    },
                    {
                        "id": 6714,
                        "toPlace": {
                            "id": 2374,
                            "name": "Chiang Mai",
                            "countryId": "TH",
                            "countryName": "Thailand",
                            "translatedName": "Chiang Mai",
                            "translatedCountryName": "Thaïlande",
                            "photographyHolder": {
                                "id": 1318,
                                "photographies": [
                                    {
                                        "id": 604103,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 480,
                                        "originalHeight": 270,
                                        "latitude": 18.7668,
                                        "longitude": 98.9626,
                                        "attribution": null,
                                        "multisized": false,
                                        "pathRelative": true,
                                        "path": "uploads/images/small/MLl0CayizB.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 1,
                        "duration": 4,
                        "fromDate": "06/11/2018",
                        "toDate": "06/15/2018"
                    },
                    {
                        "id": 6715,
                        "toPlace": {
                            "id": 2596,
                            "name": "Guangzhou",
                            "countryId": "CN",
                            "countryName": "China",
                            "translatedName": "Canton",
                            "translatedCountryName": "Chine",
                            "photographyHolder": {
                                "id": 1429,
                                "photographies": [
                                    {
                                        "id": 500364,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 960,
                                        "originalHeight": 540,
                                        "latitude": null,
                                        "longitude": null,
                                        "attribution": {
                                            "id": 500364,
                                            "sourceProvider": "Pixabay",
                                            "sourceName": "Pixabay",
                                            "url": null,
                                            "license": "CC0 1.0 Universal (CC0 1.0)",
                                            "authorUrl": null,
                                            "author": null,
                                            "title": null,
                                            "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                        },
                                        "multisized": true,
                                        "largePath": "uploads/images/large/vMspZ4Sx8d.jpg",
                                        "pathRelative": true,
                                        "mediumPath": "uploads/images/medium/vMspZ4Sx8d.jpg",
                                        "smallPath": "uploads/images/small/vMspZ4Sx8d.jpg",
                                        "thumbnailPath": "uploads/images/thumbnail/vMspZ4Sx8d.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 2,
                        "duration": 3,
                        "fromDate": "06/15/2018",
                        "toDate": "06/18/2018"
                    },
                    {
                        "id": 6716,
                        "toPlace": {
                            "id": 1132,
                            "name": "Paris",
                            "countryId": "FR",
                            "countryName": "France",
                            "translatedName": "Paris",
                            "translatedCountryName": "France",
                            "photographyHolder": {
                                "id": 638,
                               "photographies": [
                                    {
                                        "id": 500131,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 960,
                                        "originalHeight": 540,
                                        "latitude": null,
                                        "longitude": null,
                                        "attribution": {
                                            "id": 500131,
                                            "sourceProvider": "Pixabay",
                                            "sourceName": "Pixabay",
                                            "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                            "license": "CC0 1.0 Universal (CC0 1.0)",
                                            "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                            "author": "daviddeolindo22 / 1 image",
                                            "title": "Eiffel Tower Lovely Photo",
                                            "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                        },
                                        "multisized": true,
                                        "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                        "pathRelative": true,
                                        "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                        "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                        "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 3,
                        "duration": 0,
                        "fromDate": "06/18/2018",
                        "toDate": "06/18/2018"
                    }
                ],
                "price": 1304,
                "lowerPriceBound": 1472,
                "higherPriceBound": 2848,
                "accommodationPackageQuote": {
                    "id": 6,
                    "onBudgetQuote": 122.81,
                    "threeStarsQuote": 177.70999,
                    "fourStarsQuote": 275.64,
                    "fiveStarsQuote": 584.17004
                }
            }
        }
    }


### Build an Itinerary [/trip/multidestination/build/{itineraryId}{?withPackage}]

This endpoint will allow you to **build a trip** out of a given **accommodation package type** and an **itinerary id**
This means that while paths and journeys were built neither the accommodations nor the trip entity were built yet and 
they need to be built in. The goal here is to **build the accommodations on top of the new trip entity** with the above 
mentionned **package and itinerary**. 

<a name="TripKey"></a>
This endpoint will return the freshly generated trip id and key. When the trip is fully generated, we issue a key to 
ensure that **it can only be modified by its owner**. Keys were thought to safeguard the trip pages as a password do. When
used in our front-end application, they are stored in the local storage of the end-user browser so that if they refresh
page, they will still have access to their trip but if they share this url, the other user won't be able to see this
trip page and therefore won't be able to edit it. In fact, once the trip is generated, every endpoint are safeguarded
by the same key scheme and this is in order to avoid concurrent modifications which could lead to both strange 
behaviors on our side but more importantly, strange behavior as perceived by an end-user even in the case where it 
worked technically correctly.

The `discountPercentage` field **doesn't represent any real world value**. It is just a hashed quantity based on the id 
and the price of this trip that never change (except if the price changes). This can be used as a fake discount 
percentage in front-end application or just bypassed.

Please also note that you can build accommodations to the same itinerary **as many times as you wish** without causing
any error. If done several times on an identical itinerary, you will notice that **the same trip entity** is sent back 
each time, but **the trip accommodations** are updated to the new selected package requirements. The only case in which 
it might end out with an exception is **when the itinerary is not available anymore** as it has a short lifespan (yet 2
hours only).

If the package isn’t defined for the given trip proposition, or if no accommodation package was previously retrieved, 
(for example if you never used the `withAccommodationPackagesQuote` parameter when you retrieved the itinerary you are 
trying to build) then this request will fail and **end up with a 422 error**. Sometimes, (altough very rarely) the
package is not anymore live because the prices yield since they were proposed. In this case, a **404 will be thrown**
 and the end-user will be asked to choose another trip proposition.

+ Parameters
    + itineraryId: 21 (required, number) -  The id of the selected itinerary.
    + withPackage: FOUR_STARS (required, PackageCategory) - The category of the package selected. can be one of 
    <br/>`ON_BUDGET` : Any unranked or below 3 stars hotel.
    <br/>`THREE_STARS` : Any 3 stars hotel.
    <br/>`FOUR_STARS` : Any 4 stars hotel.
    <br/>`FIVE_STARS` : Any 5 stars hotel.
    <br/>
    
    
### Build Your Itinerary [PUT]

+ Response 200 (application/json)

    {
        "status": "SENT",
        "httpStatus": 201,
        "tokenExpiration": "05/31/2018 00:14:11.9350+00:00",
        "apiCallId": 9125,
        "contents": {
            "trip": {
                "id": 545,
                "key": "QjwUAHqTDQXgPaJryC0R",
                "createdAt": "05/31/2018 01:14",
                "updatedAt": "05/31/2018 01:14",
                "discountPercentage": 65
            },
            "request": {
                "id": 489
            }
        }
    }


### Get a Trip [/trip/{tripId}{?key}]

Once you've built the trip, you want to retrieve it. This can be done easily through this `GET` endpoint. We require you
to submit both the id of the trip and its key in order to ensure that the owner of the trip is querying the trip itself.
 
The complete trip object returned will allow you to access to all datas concerning : the original request performed, 
the complete itinerary, the flights used and the accommodations in the package. The flights contain at this step nearly
no valuable information. This will change soon as we will use the itinerary building step to retrieve information about
our choosen flight tickets right here.

To understand correctly the trip object you will retrieve from this endpoint, we advise you take a look at our
[detailed explanations](#Journey) about the `Journey` object.

+ Parameters
    + tripId: 546 (number, required) - The id of the trip you want to retrieve
    + key: `3tcIXKkZPircDSm2FNLp` (string, required) - The key to access the trip securely. ([Learn more](#TripKey).)
    
    
### Get a Trip [GET]          
               
+ Response 200 (application/json)
```
{
    "status": "SENT",
    "httpStatus": 200,
    "tokenExpiration": "05/31/2018 09:53:28.1990+00:00",
    "apiCallId": 9139,
    "contents": {
        "trip": {
            "id": 549,
            "key": "3tcIXKkZPircDSm2FNLp",
            "journeys": [
                {
                    "id": 6945,
                    "toPlace": {
                        "id": 2372,
                        "name": "Bangkok",
                        "countryId": "TH",
                        "countryName": "Thailand",
                        "translatedName": "Bangkok",
                        "translatedCountryName": "Thaïlande",
                        "photographyHolder": {
                            "id": 1316,
                            "photographies": [
                                {
                                    "id": 500341,
                                    "type": "LANDSCAPE",
                                    "origin": "SELF_HOSTED",
                                    "originalWidth": 960,
                                    "originalHeight": 540,
                                    "latitude": null,
                                    "longitude": null,
                                    "attribution": {
                                        "id": 500341,
                                        "sourceProvider": "Pixabay",
                                        "sourceName": "Pixabay",
                                        "url": "https://pixabay.com/en/https://pixabay.com/fr/grand-palace-wat-phra-kaew-bangkok-1822487/",
                                        "license": "CC0 1.0 Universal (CC0 1.0)",
                                        "authorUrl": "pixabay.com",
                                        "author": "",
                                        "title": "Https://pixabay.com/fr/grand Palace Wat Phra Kaew Bangkok",
                                        "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                    },
                                    "multisized": true,
                                    "pathRelative": true,
                                    "largePath": "uploads/images/large/mX3ufxb5yU.jpg",
                                    "smallPath": "uploads/images/small/mX3ufxb5yU.jpg",
                                    "mediumPath": "uploads/images/medium/mX3ufxb5yU.jpg",
                                    "thumbnailPath": "uploads/images/thumbnail/mX3ufxb5yU.jpg"
                                }
                            ]
                        }
                    },
                    "path": {
                        "id": 8175,
                        "fromDate": "06/08/2018 00:00",
                        "toDate": "06/08/2018 00:00",
                        "price": 1298,
                        "type": "FLIGHT",
                        "distanceTravelled": null,
                        "quoteCreatedAt": "05/31/2018 08:52:46.0000+00:00",
                        "cache": false,
                        "quoteDatetime": "05/31/2018 08:52:46.0000+00:00",
                        "companies": [],
                        "durationInMinutes": null,
                        "flightExtension": {
                            "id": 9865,
                            "fromAirport": {
                                "id": 1185,
                                "name": "Charles de Gaulle International Airport",
                                "iata": "CDG",
                                "translatedName": "Aéroport Charles de Gaulle International"
                            },
                            "toAirport": {
                                "id": 2456,
                                "name": "Suvarnabhumi Airport",
                                "iata": "BKK",
                                "translatedName": "Aéroport Suvarnabhumi"
                            },
                            "apiCompany": "SKYLAP_PRICE"
                        },
                        "transportationClass": "ECONOMY",
                        "ticketType": "SKYLAP_MULTIDESTINATION_MASTER_TICKET",
                        "bookingAgent": {
                            "id": 30,
                            "name": "Skylap",
                            "rawLogoUrl": "https://www.skylap.co/assets/images/logo.png"
                        },
                        "bookingSession": {
                            "id": 2015,
                            "origin": "SKYLAP",
                            "createdAt": "05/31/2018 08:52:46.0000+00:00",
                            "agent": {
                                "id": 30,
                                "name": "Skylap",
                                "rawLogoUrl": "https://www.skylap.co/assets/images/logo.png"
                            },
                            "price": 1298,
                            "valid": true,
                            "refreshable": false,
                            "expiresAt": "05/31/2018 10:52:46.0000+00:00",
                            "modifiable": false,
                            "expired": false
                        }
                    },
                    "accommodationBooking": {
                        "id": 1247,
                        "accommodation": {
                            "id": 11556,
                            "origin": "BOOKING",
                            "name": "Metro Point Bangkok",
                            "latitude": 13.76837,
                            "longitude": 100.63203,
                            "starRating": 7.1,
                            "reviewsNumber": 29,
                            "url": "https://www.booking.com/hotel/th/metro-point-bangkok.html",
                            "description": "L'hôtel Metro Point, ayant ouvert ses portes en décembre 2008, est situé à seulement 20 minutes de route de l'aéroport international de Suvarnabhumi et permet d'accéder facilement aux principales destinations locales et touristiques.",
                            "params": {
                                "prefered": false,
                                "importantInformation": "",
                                "welcomeMessage": null,
                                "facilities": [
                                    "parking",
                                    "Restaurant",
                                    "Service d'étage",
                                    // ...
                                ]
                            },
                            "address": "666 Soi Ladprao 130, Ladprao Road, Klongjun, Ramkhamhaeng 81",
                            "zip": "10240",
                            "currency": "THB",
                            "hotelClass": 4,
                            "photographyHolder": {
                                "id": 45583,
                                "photographies": [
                                    {
                                        "id": 403000,
                                        "type": "LANDSCAPE",
                                        "origin": "BOOKING",
                                        "originalWidth": 1024,
                                        "originalHeight": 1024,
                                        "latitude": 13.7684,
                                        "longitude": 100.632,
                                        "attribution": {
                                            "id": 399602,
                                            "sourceProvider": "booking.com",
                                            "sourceName": "booking.com",
                                            "url": null,
                                            "license": null,
                                            "authorUrl": "booking.com",
                                            "author": "booking.com",
                                            "title": "Metro Point Bangkok photography 1_300",
                                            "licenseUrl": null
                                        },
                                        "multisized": false,
                                        "pathRelative": false,
                                        "path": "https://aff.bstatic.com/images/hotel/max1024x768/287/28719040.jpg"
                                    },
                                    // ...
                                ]
                            },
                            "distanceToCityCenter": 13.683149
                        },
                        "price": 85,
                        "quoteDateTime": "05/31/2018 10:53",
                        "roomBookings": [
                            {
                                "id": 1319,
                                "price": 75.35,
                                "passengers": [
                                    {
                                        "id": 637,
                                        "age": 19
                                    }
                                ]
                            }
                        ],
                        "commonRoomBlock": {
                            "id": 2267,
                            "room": {
                                "id": 2201,
                                "roomSurfaceInSquareMeters": 28,
                                "name": "Chambre Double ou Lits Jumeaux Supérieure - Non remboursable",
                                "description": "Cette chambre double/lits jumeaux comprend 1 grand lit double ou 2 lits simples.",
                                "photographyHolder": {
                                    "id": 70792,
                                    "photographies": [
                                        {
                                            "id": 604666,
                                            "type": "LANDSCAPE",
                                            "origin": "BOOKING",
                                            "originalWidth": 1024,
                                            "originalHeight": 1024,
                                            "latitude": 13.7684,
                                            "longitude": 100.632,
                                            "attribution": {
                                                "id": 604186,
                                                "sourceProvider": null,
                                                "sourceName": "booking.com",
                                                "url": null,
                                                "license": null,
                                                "authorUrl": null,
                                                "author": null,
                                                "title": "1_1024",
                                                "licenseUrl": null
                                            },
                                            "multisized": false,
                                            "pathRelative": false,
                                            "path": "https://q-xx.bstatic.com/images/hotel/max1024x768/122/122672945.jpg"
                                        }
                                    ]
                                },
                                "bedroomsCount": null,
                                "bathroomsCount": null
                            },
                            "maxOccupancy": 2,
                            "maxChildrenFree": 0,
                            "maxChildrenFreeAge": 12,
                            "mealPlan": "NONE",
                            "breakfastIncluded": false,
                            "refundable": false
                        },
                        "pageNumber": 0,
                        "roomsNumber": 0,
                        "deeplink": "https://www.booking.com/hotel/th/metro-point-bangkok.html?aid=1312052&checkin=2018-06-08&checkout=2018-06-11&room_1=A",
                        "pricingExpired": false
                    },
                    "actualJourneyInd": 0,
                    "allAccommodationsFetched": true,
                    "lastAccommodationPage": 3,
                    "accommodationPackagesQuote": {
                        "id": 35,
                        "onBudgetQuote": {
                            "category": "ON_BUDGET",
                            "price": 27.19,
                            "pageCount": 37
                        },
                        "threeStarsQuote": {
                            "category": "THREE_STARS",
                            "price": 44.32,
                            "pageCount": 52
                        },
                        "fourStarsQuote": {
                            "category": "FOUR_STARS",
                            "price": 85,
                            "pageCount": 32
                        },
                        "fiveStarsQuote": {
                            "category": "FIVE_STARS",
                            "price": 104.31,
                            "pageCount": 12
                        }
                    },
                    "duration": 3,
                    "fromDate": "06/08/2018",
                    "price": 1383,
                    "toDate": "06/11/2018",
                    "alternativeAccommodationBookings": [
                       // alternative accommodation bookings
                    ]
                },
                //...
            ],
            "fromPlace": {
                // another destination object
            }, 
            "toPlace": {
                // and one other destination object
            },
            "createdAt": "05/31/2018 10:53",
            "updatedAt": "05/31/2018 10:53",
            "favorited": false,
            "skyscannerFlightTarificationSearch": null,
            "category": "FOUR_STARS",
            "price": 1572.5599,
            "duration": 10,
            "passed": false,
            "discountPercentage": 42
        },
        "request": {
            "id": 493,
            "customTag": null,
            "fromDate": "06/08/2018",
            "toDate": "06/18/2018",
            "moreJourneys": false,
            "passengers": [
                {
                    "id": 637,
                    "age": 19
                }
            ],
            "fromPlace": {
                // and another one destination object
            },
            "toPlace": {
                // finally the last one destination object
            },
            "createdAt": "05/31/2018",
            "budget": {
                "id": 1003,
                "value": 300
            },
            "regenerated": false,
            "flexibleDates": false,
            "destinationsCount": 3,
            "mustUseDestinations": [],
            "region": "ASIA",
            "requestTags": [],
            "passengersCount": 1,
            "tripDuration": 10,
            "family": false
        }
    }
}
```

               
### Geo Structures [/geo/autocomplete{?query,geoTypes}]
<a name="Geo"></a>

This endpoint can mix up **several types of geo entities** in a single **autocomplete tool**. You 
can select the types of geo entities you are interested in. Currently, only cities and airports are
supported.

There is no other Geo Endpoints but if you need more geo endpoints in order to map your geographic 
content to ours correctly, please feel free to send us a request, we would be delighted to develop 
this feature for you. If you need more detailed information from this endpoint (like latitude and 
longitude for example), feel free to contact us as well.

We plan to soon add an endpoint to map an ip address to its closest city so that you can make use 
of this information as a default departure date.

<a name="Autocomplete"></a>   
+ Parameters
    + query: Pari (string) - The search query string
    + geoTypes: DESTINATION,AIRPORT (array[GeoType]) - The type of Geo objects you want to query, it
     can be DESTINATION and/or AIRPORT.
             
### Autocomplete [GET]
        
+ Response 200 (application/json)

     {
     
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 16:43:07.8930+00:00",
        "apiCallId": 9110,
        "contents": {
            "results": [
                {
                    "id": "DE1132",
                    "name": "Paris",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "PAR",
                    "geoType": "DESTINATION"
                },
                {
                    "id": "DE5650",
                    "name": "Parintins",
                    "cityName": "Parintins",
                    "countryName": "Brazil",
                    "iata": "PIN",
                    "geoType": "DESTINATION"
                },
                {
                    "id": "AI1181",
                    "name": "Paris Beauvais Tillé Airport",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "BVA",
                    "geoType": "AIRPORT"
                },
                {
                    "id": "AI1185",
                    "name": "Charles de Gaulle International Airport",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "CDG",
                    "geoType": "AIRPORT"
                },
                {
                    "id": "AI1186",
                    "name": "Paris-Orly Airport",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "ORY",
                    "geoType": "AIRPORT"
                },
                {
                    "id": "AI5418",
                    "name": "Parintins Airport",
                    "cityName": "Parintins",
                    "countryName": "Brazil",
                    "iata": "PIN",
                    "geoType": "AIRPORT"
                }
            ]
        }
    }
            
# Data Structures

## Passenger (object)

- `age`: `19` (number)

## Region (enum[string])
+ `EUROPE` - Europe
+ `ASIA` - Asia
+ `NORTH_AMERICA` - Northern America
+ `SOUTH_AMERICA` - South America
+ `MIDDLE_EAST` - Middle East
+ `OCEANIA` - Oceania
+ `AFRICA` - Africa
+ `INDIA` - India


## GeoType (enum[string])
 + `DESTINATION` - City Type
 + `AIRPORT` - Airport Type

## Tag (enum[string])
 + `CWB` - WELL_BEING : This will filter out hotels that doesn't have a spa, a pool, or any other well being space.
 + `COB` - ON_BUDGET : Only 3 stars and `ON_BUDGET` accommodation packages. Dormitories will be enabled.
 + `CMF` - COMFORT : Only 3, 4 and 5 stars accommodation packages.
 + `CCC` - CITY_CENTER : Will show only the hotels in the city center.     
 + `CCUL` - CULTURE
 + `CHI` - HISTORIC
 + `CUN` - UNESCO
 + `CFO` - FOOD
 + `CWI` - WINE
 + `COLD` - OLDTOWN
 + `CARC` - ARCHITECTURE
 + `CCAT` - CATHEDRAL
 + `MMUS` - MUSIC
 + `NNAT` - NATURE
 + `NMOU` - MOUNTAIN
 + `NSEA` - SEA
 + `HNIG` - NIGHTLIFE
 + `SGOL` - GOLF
 + `SURF` - SURF
 + `SSK` - SKI
 + `SDIV` - DIVING
 + `TPOP` - POPULAR
 + `TSHO` - SHOPPING
 + `TWO` - WONDER
 + `TCIT` - CITY
 + `TCAP` - CAPITALES
 + `TROM` - ROMANTIC
 + `TCAS` - CASINO
 + `GNE` - NORTHERN_EUROPE
 + `GSA` - SOUTHEAST_ASIA
 + `GEE` - EASTERN_EUROPE
 + `GCAR` - CARAIBES
 + `OFA` - FAMILY      
 
 
## PackageCategory (enum[string])
 + `ON_BUDGET` - Any unranked or below 3 stars hotel.
 + `THREE_STARS` - Any 3 stars hotel.
 + `FOUR_STARS` - Any 4 stars hotel.
 + `FIVE_STARS` - Any 5 stars hotel.

## `TripRequest` (object)

- fromDate: `06/08/2018` (required, string) -
 **Required** - The departure date of the trip.

- toDate: `06/18/2018` (required, string) -
 **Required** - The end date of the trip.

- tags: (array[enum[Tag]]) -
 **Optional** - The tags the itinerary must match. The 4 first tags describe accommodations and not the destinations
 of the itineraries.
    + Default: []

- fromPlace: `DE1132` (string) -
 **Required** The starting place of the trip. This might be either an airport or a destination (All Airports of 
this city). The available geographical entities can be retrieved using the [autocomplete endpoint](#Autocomplete).

- toPlace:  `DE1132` (string) -
**Optional** The ending place of the trip. By default, it will be set to `fromPlace` parameter value. This might be
either an airport or a destination (All Airports of this city). The available geographical entities can be retrieved
 using the [autocomplete endpoint](#Autocomplete).

- passengers (array[Passenger]) - 
**Required** The passengers of the trip. This soon will be replaced by a string similar to this one : `A,A,16,4`.
 There must be at least one adult in the passengers array.

- region: ASIA (Region) - 
**Required** The region in which the trip should take place.

- destinationsCount: `3` (number) - 
**Required** The exact number of destinations that shall appear in the itineraries. it must lie between 2 and 6 included.

- flexibleDates: `false` (boolean) - 
**Optional** Wether the start/end date is flexible (+/- 1 day).

- mustUseDestinations: DE308 (array[string]) - 
**Optional** The ids of the destinations/airports the user wants to visit. The available geographical entities can be
 retrieved using the [autocomplete endpoint](#Autocomplete).