FORMAT: 1A
HOST: https://api.whimtrip.fr/v1

# Whimtrip


# How it works

Whimtrip API is a set of multi destination API tools to **fully automatize the multi-destination trip 
creation** process.

It was designed to be as flexible as possible. As an early stage version of our API, it is possible to
**request custom features**.

Altough our API allows you to build completely custom business logic at each step, **the overall process
is quite guided** and should be the same for almost any usecase.

This API is in early release stage and if you have specific requirements, or features you would need, 
feel free to let us know by contacting us.


## Steps

 - Generate a multi-destination trip skeletton out of an input form. This skeletton will be later 
refered as a **proposition**.
 - Retrieve the itineraries page per page according to your needs. If you need **accommodation packages** 
bundled with the propositions they can be returned with the itineraries. At this step, you only have 
**price quote** and **itinerary destinations** but not much more information.
 - Generate the selected **package** for the selected **itinerary**.
 - Retrieve the **Generated trip**.
 - Customize it (**Change hotels** and much more to come).
 - Proceed to **Booking Step** (Yet only **booking tokens** forwarding is supported).

## Indications


Each generated trip is **historized** in our databases. Not only the trip is historized but 
**almost everything** that comes with it.

This means that any **generated trip** can be retrieved at any time. When retrieved, **the trip will always
be refreshed first** so that its *price can change* or its *availability can even disapear* leading to 
further described exceptions.


# General Knowledge

<a name="Authentication"></a>
## Authentication

Authentication can be provided in two different ways : 

- Using the `X-API-Key` header of your requests with your dedicated API key.
- [Authenticate](#Authenticate) and add your session token to each request in the `X-Auth-Token` header.


While the first method is much more **developer friendly**, the second one allows you to **get the most out
of our API**. In fact, if you authenticate a Whimtrip Session for each end user, you'll be able to have
**detailed data about users behavior with our API** without any further development on your side using
your backoffice access page.

Please remember that whatever is the solution you choose, your API-Key shall remain **entirely private**
and **shouldn't be used directly in any front-end application** but hidden in server-side computing.

For very particular use cases where you must use our API directly in your front-end app, we recommend
you use a **3rd authentication method** we developped internally. Please contact us directly if you need 
more information about it.

## Default Headers

There are a few general purpose headers you shall use anywhere or almost anywhere :

- `X-Auth-Token`  :  Put your user **session token** here.
- `X-API-Key` : Put your **API key** here (only if `X-Auth-Token` header isn't used).
- `Content-Type` : You should set it to `application/json` for each `POST`, `PUT`, `PATCH` and `DELETE`
request.
- `Accept-Language` : Set your **locale** here. Currently, only `FR` and `EN` are fully supported. While 
we support more locales, our geographical content and errors is not fully translated yet. Please contact
us if you need more locales support.
- `X-Forwarded-For` : Set the end user ip address it was forwarded for here. If enabled, this will help us
identify returning users (This works coupled with the `User-Agent` header).
- `User-Agent` : Set the end user **user-agent** of its browser to help us identify returning customers. If 
correctly done, this will give you better understanding of the statistical data we collect.


## GDPR Compliance

As a french company, we take GDPR compliance very seriously. We are committed to be as transparent 
about our processings as possible. 

We've stated in the two above sections that we use the end user ip address as well as its User-Agent
header in order to identify them as uniquely as possible. Further more, we also stated that using 
session authentication can help you leverage the true power of our API. Yet, **those information are 
personal informations** and we are not entitled to handle them that easily or at least we don't want to do
so. 

*Does that mean you shouldn't forward us ip addresses and User-Agent header ?* Well not exactly, this 
simply mean we have to handle them carefully. We ask our developers to **remove the last byte 
of the ip address** of the end user or replace it with a `0`. If you don't do it, we will in any case 
replace it with `0`. Given the three first byte of an ip address, the location of their real world issuer
is so wide that **it cannot be mapped back to a unique user** or family. Not even with the User-Agent
header.

This imply that we can still identify returning users in most cases but without being able to identify
them, and without the help of any kind of cookie or user stored data. Of course, this  method doesn't 
work as well as the cookie method that Google Analytics uses for example, but it does give great 
aggregated measures for correctly understanding your usage of our API.


## CORS

Our API supports [**CORS standard**](https://fr.wikipedia.org/wiki/Cross-origin_resource_sharing).
The `Origin` header can be used to set up the origin of the request. The request won't be accepted if 
the origin is not part of the origins you added from your developper office. By default, all 
origins are accepted.

You can also limit the ips that are allowed to use your API-key in your account settings.

## Set-Up   

The Set-Up process is quite simple, you shall create a Developper account [here](https://developer.whimtrip.fr).

***Please note that this feature is not yet supported and developer have to go through a manual 
account creation process by contacting us directly.***

You will then be able to **create and add API keys** through your account page and setup the access rights
for it *(ips allowed, origins allowed, api call limits if any...)*.

## Response Template

All of our 2xx responses body follow the same scheme described below :



         {
          
            "status": "SENT",
            "httpStatus": 200,
            "tokenExpiration": "05/29/2018 17:05:52.7260+00:00",
            "apiCallId": 9095,
            "contents": {
                // Some Object(s)
            }  
            
    }
    

Please note that the `tokenExpiration` field won't show up if you use session less authentication.

`apiCallId` can be used for debug purposes. You can submit us manually the API call id in case of any
internal server error for us to better understand it. Additionally, we designed an endpoint for automatic
exception reporting. Please contact us if you are interested in it.

`contents` might contains a JSON object or array depending on the endpoint.

Even though we send you `httpStatus` param, we still use real Http Status and the HttpStatus is the one
that should be checked whatsoever happens.


## Errors

Errors are 4xx or 5xx HTTP status code responses. They will always follow the same structure :
            
        {
    
            "status": "FAILED",
            "httpStatus": 404,
            "tokenExpiration": "05/29/2018 17:32:46.1920+00:00",
            "apiCallId": 9096,
            "errorDetails": {
                "canonicalError": "_error_trip_not_mocked",
                "errorValue": "This isn't a trip proposition results list. Did you modified manually the URL?"
            }
                        
    }

Except for `errorDetails` and disapearance of `contents` in the payload, this is the same schema as
with 2xx responses.

`canonicalError` contains the error code and `errorValue` contains the localized error message that
can be prompted to the end user directly. The locale is the one submitted with the `Accept-Language`
header.

For validation errors 4xx, there are additionnal information in the `errorDetails` object :

    {
            
        "status": "FAILED",
        "httpStatus": 404,
        "tokenExpiration": "05/29/2018 17:32:46.1920+00:00",
        "apiCallId": 9096,
        "errorDetails": {
            "canonicalError": "_error_any_validation_failed",
            "errorValue": "Submitted form contains validation errors, please review it",
            "errors": [
                {
                    "canonicalError": "_error_trip_wrong_from_date",
                    "fieldConcerned": "fromDate",
                    "errorValue": "Departure date cannot be in the past"
                },
                {
                    "canonicalError": "_error_trip_wrong_to_date",
                    "fieldConcerned": "toDate",
                    "errorValue": "Return date cannot be in the past"
                }
            ]
        }
    }
    
    
    
The `fieldConcerned` field describe the input property that led to this exception.

Currently, validations errors are not properly handled in `GET` query parameters and generally in all URL 
query parameter because they are processed in a different way. This problem will be addressed soon in 
order to provide a better understanding of those errors.

Similarly badly typed enumeration values leads to validation errors with nearly no information to correct
it. This shall be addressed soon as well.
    
## Errors Status Code

- `400 - Bad Request` indicates a **validation error**
- `401 - Unauthaurized` indicates that this **request cannot be authorized**. This might be because of your
API key, the issuer of the request, an eventual login failure, a forbidden domain, a bad token or an 
expired token or because you are not connected.
- `403 - Forbidden` indicates a **blacklisted ip** or a **lack of right** to access an endpoint. 
Additionnally, this might refer to  **any forbidden action** such as trying to access to a trip 
without owning it.
- `404 - Not Found` indicates that **the required resource wasn't found** or that the corresponding search
didn't yield any result.
- `406 - Not Acceptable` indicates that the **Content-Type requested isn't available**. Currently, only
`Content-Type : application/json` is supported and `JSON` is the ony output format available. We plan
to add soon enough the possibility to interact with our API using `XML` schemas.
- `410 - Gone` indicates that the requested **resource is not anymore available**. This might also indicate
that the action cannot be performed anymore. Retrying the request will yield the exact same status code.
- `422 - Unprocessable Entity` indicates that the entity submitted or request submitted **isn't valid**.
While this might sound pretty much **similar to a validation error**, those errors usually occures in 
deeper parts of the checking process after the easy validation itself. Most of the time, this require 
a pre-processing before being able to trigger it and this is the reason why it cannot be done as a 
part of the validation process.
- `429 - Too Many Requests` indicates that you hit your **daily API limit** or that you performed 
**too many request simultaneously**.
- `5xx - Internal Server Error` indicates that an **unknown error** occured on our side. This error will 
be logged in our database in order for us to correct it as soon as possible. However, you can send us more
detailed information if you wish by **contacting us with the provided error response** and a description 
of what you were doing at the moment the exception occured. We will do our best to correct those errors as
soon as possible and to carefully unit test their behavior.

## REST

We strongly believe in the beauty and clarity of REST protocol. Our whole API is based as much as possible
on [REST protocol](https://fr.wikipedia.org/wiki/Representational_state_transfer). You can check the wiki
article if you are not familiar with it yet.


<a name="Authenticate"></a>
## Authenticate [/authenticate]


This endpoint will allow you to issue a session token for a single end-user. The retrieved token can
be used in the `X-Auth-Token` header in each concerned requests. For detailed information about the 
different authentication scheme we provide, you can refer to [this part](#Authentication).

### Authenticate [POST] 


+ Request (application/json)

        {
            "key": "YOUR_API_kEY"
        }

+ Response 200 (application/json)

        {
            "status": "SENT",
            "httpStatus": 201,
            "tokenExpiration": "05/29/2018 23:34:50.3220+00:00",
            "apiCallId": 9105,
            "contents": {
                "token": "eyJzdCI6Ik5qRXpNRE09LU9EZ3pOemc9LU1USTVNZz09LVVETXZiRGxCIiwiaWQiOiJRMjFWUyJ9"
            }
        }
        
           

### Itineraries Generation [/trip/multidestination/generate]
<a name="Generation"></a>
The propositions endpoint are the entry point of the trip automation process. They contains two steps.
The first one consist in submitting the trip creation form. This is the step described below. And the
second one will be about retrieving the generated multi-destination trips itineraries. This will be covered
just after the generation endpoint.

### Generate Itineraries Matching Your Request  [POST]

+ Request (application/json)
    + Attributes (TripRequest)

+ Response 201 (application/json)
    
    {
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 20:20:32.9850+00:00",
        "apiCallId": 9115,
        "contents": {
            "proposition": {
                "propositionId": 542,
                "pagesCount": 4
            }
        }
    }
    
### Retrieving Itineraries [/trip/multidestination/{propositionId}{?withAccommodationPackages,page}]

For this endpoint, you will **need to use the `propositionId`** you gathered during the **previous generation API call**. 
The page count of the previous response can also be useful altough pagination information are also precised in this
endpoint response while we ensure that there is **at least one page** in any case. This means that checking the pages 
count from the previous API call is not required but it all depends on how you integrate our API.

At this stage, and if you set the `withAccommodationPackages` parameter to `true` (see the Example panel for more 
information about this parameter), you will get the prices for different types of packages. Available packages are
sorted amongst 4 categories : `ON_BUDGET`, `THREE_STARS`, `FOUR_STARS` and `FIVE_STARS`. 

Each itinerary contains the **price of the flight only itinerary** as well as the **accommodation packages prices**.
Displayed packages prices are **hotels only prices** so that the full real price should be **the sum of both the flight
only and the hotels only prices.**

Prices are summed up **for all passengers**. This means that what we return **is not the price per passenger** but 
instead the **total price for all passengers**. This is true for all of our endpoints except otherwised mentionned.

We've decided that itineraries should be polled by page and that **each page should contain up to 5 itineraries** 
(it will contain 5 or less itinerary on the last page of results). This decision was made because of the underlying 
prerequisites on Booking API. If we use your own hotel database, we might agree on a custom page size if you need 
this feature.

+ Parameters
    + propositionId: 542 (required, number) - The id of the proposition returned in the [generation endpoint](#Generation).

    + withAccommodationPackages: true (optional, boolean) - Wether you want to **activate the accommodation packages** feature here
     or not. This will give you the prices of the different packages available. <br/>
     
     If you used the tag `ON_BUDGET` or `COMFORT` in your generation request, this will **limitate the types of packages** 
     generated (no 4* and 5* with `ON_BUDGET` tag and no budget hotel with `COMFORT` tag). <br/> 
     
     Polling the accommodation prices can take up some time for us (up to two more seconds of processing) and is computing 
     intensive for us. If you don't need the accommodation packages here, we **strongly recommend** you set this parameter
     to false in order to have far quicker responses. There is another way to retrieve it later using 
     [another endpoint](#GetItinerary).
     
    + page: 0 (optional, number) - By default, it will be set to 0. Pagination starts at 0 and the max page number you can fetch 
      is indicated in the [generation endpoint](#Generation) response `pagesCount` parameter. As the pagination start 
      at index 0, the max page index you can fetch is equal to *`pagesCount - 1`*.
     
### Retrieve Generated Itineraries [GET]
    
+ Response 200 (application/json)
    
    {
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 20:49:47.4950+00:00",
        "apiCallId": 9116,
        "contents": {
            "propositionId": 542,
            "request": {
                "id": 486,
                "customTag": null,
                "fromDate": "06/08/2018",
                "toDate": "06/18/2018",
                "moreJourneys": false,
                "passengers": [
                    {
                        "id": 630,
                        "age": 19
                    }
                ],
                "fromPlace": {
                    "id": 1132,
                    "name": "Paris",
                    "countryId": "FR",
                    "countryName": "France",
                    "translatedName": "Paris",
                    "translatedCountryName": "France",
                    "photographyHolder": {
                        "id": 638,
                        "photographies": [
                            {
                                "id": 500131,
                                "type": "LANDSCAPE",
                                "origin": "SELF_HOSTED",
                                "originalWidth": 960,
                                "originalHeight": 540,
                                "latitude": null,
                                "longitude": null,
                                "attribution": {
                                    "id": 500131,
                                    "sourceProvider": "Pixabay",
                                    "sourceName": "Pixabay",
                                    "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                    "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                    "author": "daviddeolindo22 / 1 image",
                                    "title": "Eiffel Tower Lovely Photo",
                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                },
                                "multisized": true,
                                "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                "pathRelative": true,
                                "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                            },
                            // Some more photographies
                        ]
                    }
                },
                "toPlace": {
                    "id": 1132,
                    "name": "Paris",
                    "countryId": "FR",
                    "countryName": "France",
                    "translatedName": "Paris",
                    "translatedCountryName": "France",
                    "photographyHolder": {
                        "id": 638,
                        "photographies": [
                            {
                                "id": 500131,
                                "type": "LANDSCAPE",
                                "origin": "SELF_HOSTED",
                                "originalWidth": 960,
                                "originalHeight": 540,
                                "latitude": null,
                                "longitude": null,
                                "attribution": {
                                    "id": 500131,
                                    "sourceProvider": "Pixabay",
                                    "sourceName": "Pixabay",
                                    "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                    "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                    "author": "daviddeolindo22 / 1 image",
                                    "title": "Eiffel Tower Lovely Photo",
                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                },
                                "multisized": true,
                                "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                "pathRelative": true,
                                "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                            }
                        ]
                    }
                },
                "createdAt": "05/30/2018",
                "regenerated": false,
                "flexibleDates": false,
                "destinationsCount": 3,
                "mustUseDestinations": [],
                "region": "ASIA",
                "requestTags": [],
                "passengersCount": 1,
                "tripDuration": 10,
                "family": false
            },
            "pagesCount": 4,
            "itineraries": {
                "results": [
                    {
                        "id": 21,
                        "journeys": [
                            {
                                "id": 6633,
                                "toPlace": {
                                    "id": 2381,
                                    "name": "Phuket",
                                    "countryId": "TH",
                                    "countryName": "Thailand",
                                    "translatedName": "Phuket",
                                    "translatedCountryName": "Thaïlande",
                                    "photographyHolder": {
                                        "id": 1322,
                                        "photographies": [
                                            {
                                                "id": 604108,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 480,
                                                "originalHeight": 270,
                                                "latitude": 8.1132,
                                                "longitude": 98.3169,
                                                "attribution": null,
                                                "multisized": false,
                                                "pathRelative": true,
                                                "path": "uploads/images/small/NEGioHzsW5.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 0,
                                "duration": 3,
                                "fromDate": "06/08/2018",
                                "toDate": "06/11/2018"
                            },
                            {
                                "id": 6634,
                                "toPlace": {
                                    "id": 2375,
                                    "name": "Chiang Rai",
                                    "countryId": "TH",
                                    "countryName": "Thailand",
                                    "translatedName": "Chiang Rai",
                                    "translatedCountryName": "Thaïlande",
                                    "photographyHolder": {
                                        "id": 1319,
                                        "photographies": [
                                           {
                                                "id": 604100,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 480,
                                                "originalHeight": 270,
                                                "latitude": 19.9523,
                                                "longitude": 99.8829,
                                                "attribution": null,
                                                "multisized": false,
                                                "pathRelative": true,
                                                "path": "uploads/images/small/CbGFkMyS5z.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 1,
                                "duration": 4,
                                "fromDate": "06/11/2018",
                                "toDate": "06/15/2018"
                            },
                            {
                                "id": 6635,
                                "toPlace": {
                                    "id": 2372,
                                    "name": "Bangkok",
                                    "countryId": "TH",
                                    "countryName": "Thailand",
                                    "translatedName": "Bangkok",
                                    "translatedCountryName": "Thaïlande",
                                    "photographyHolder": {
                                        "id": 1316,
                                        "photographies": [
                                            {
                                                "id": 500341,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 960,
                                                "originalHeight": 540,
                                                "latitude": null,
                                                "longitude": null,
                                                "attribution": {
                                                    "id": 500341,
                                                    "sourceProvider": "Pixabay",
                                                    "sourceName": "Pixabay",
                                                    "url": "https://pixabay.com/en/https://pixabay.com/fr/grand-palace-wat-phra-kaew-bangkok-1822487/",
                                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                                    "authorUrl": "pixabay.com",
                                                    "author": "",
                                                    "title": "Https://pixabay.com/fr/grand Palace Wat Phra Kaew Bangkok",
                                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                                },
                                                "multisized": true,
                                                "largePath": "uploads/images/large/mX3ufxb5yU.jpg",
                                                "pathRelative": true,
                                                "mediumPath": "uploads/images/medium/mX3ufxb5yU.jpg",
                                                "smallPath": "uploads/images/small/mX3ufxb5yU.jpg",
                                                "thumbnailPath": "uploads/images/thumbnail/mX3ufxb5yU.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 2,
                                "duration": 3,
                                "fromDate": "06/15/2018",
                                "toDate": "06/18/2018"
                            },
                            {
                                "id": 6636,
                                "toPlace": {
                                    "id": 1132,
                                    "name": "Paris",
                                    "countryId": "FR",
                                    "countryName": "France",
                                    "translatedName": "Paris",
                                    "translatedCountryName": "France",
                                    "photographyHolder": {
                                        "id": 638,
                                        "photographies": [
                                            {
                                                "id": 500131,
                                                "type": "LANDSCAPE",
                                                "origin": "SELF_HOSTED",
                                                "originalWidth": 960,
                                                "originalHeight": 540,
                                                "latitude": null,
                                                "longitude": null,
                                                "attribution": {
                                                    "id": 500131,
                                                    "sourceProvider": "Pixabay",
                                                    "sourceName": "Pixabay",
                                                    "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                                    "license": "CC0 1.0 Universal (CC0 1.0)",
                                                    "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                                    "author": "daviddeolindo22 / 1 image",
                                                    "title": "Eiffel Tower Lovely Photo",
                                                    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                                },
                                                "multisized": true,
                                                "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                                "pathRelative": true,
                                                "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                                "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                                "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                                            }
                                        ]
                                    }
                                },
                                "actualJourneyInd": 3,
                                "duration": 0,
                                "fromDate": "06/18/2018",
                                "toDate": "06/18/2018"
                            }
                        ],
                        "price": 1078,
                        "accommodationPackageQuote": {
                            "id": 206,
                            "onBudgetQuote": 121.05,
                            "threeStarsQuote": 167.77,
                            "fourStarsQuote": 234.54001,
                            "fiveStarsQuote": null
                        }
                    },
                    // 4 more itineraries
                ],
                "totalResultsCount": 20,
                "remainingCount": 15,
                "offset": 0,
                "resultsCount": 5
            }
        }
    }    
 
### Retrieve an Itinerary [/trip/multidestination/itinerary/{itineraryId}] 
<a name="GetItinerary"></a>
This step **can be bypassed** and is useful almost only for **front-end direct integration**. You might want to skip
directly to the next section.

When you've retrieved the itineraries with or without the accommodation packages bind to it, you might want to gather an
itinerary **alone** with its accommodation packages. That is what this endpoint can do and this definitely can facilitate
your integration if you have a page to display the trip information where the user still have to select its package
choice. This can also be used to query the accommodation packages only when needed for a single itinerary instead of
the whole itineraries result set.

+ Parameters
    + itineraryId: 21 (required, number) - The itinerary id you want to retrieve.

### Retrieve an Itinerary [GET]

+ Response 200 (application/json)

    {
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 22:47:47.2620+00:00",
        "apiCallId": 9120,
        "contents": {
            "itinerary": {
                "id": 41,
                "journeys": [
                    {
                        "id": 6713,
                        "toPlace": {
                            "id": 2372,
                            "name": "Bangkok",
                            "countryId": "TH",
                            "countryName": "Thailand",
                            "translatedName": "Bangkok",
                            "translatedCountryName": "Thaïlande",
                            "photographyHolder": {
                                "id": 1316,
                                "photographies": [
                                    {
                                        "id": 500341,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 960,
                                        "originalHeight": 540,
                                        "latitude": null,
                                        "longitude": null,
                                        "attribution": {
                                            "id": 500341,
                                            "sourceProvider": "Pixabay",
                                            "sourceName": "Pixabay",
                                            "url": "https://pixabay.com/en/https://pixabay.com/fr/grand-palace-wat-phra-kaew-bangkok-1822487/",
                                            "license": "CC0 1.0 Universal (CC0 1.0)",
                                            "authorUrl": "pixabay.com",
                                            "author": "",
                                            "title": "Https://pixabay.com/fr/grand Palace Wat Phra Kaew Bangkok",
                                            "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                        },
                                        "multisized": true,
                                        "largePath": "uploads/images/large/mX3ufxb5yU.jpg",
                                        "pathRelative": true,
                                        "mediumPath": "uploads/images/medium/mX3ufxb5yU.jpg",
                                        "smallPath": "uploads/images/small/mX3ufxb5yU.jpg",
                                        "thumbnailPath": "uploads/images/thumbnail/mX3ufxb5yU.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 0,
                        "duration": 3,
                        "fromDate": "06/08/2018",
                        "toDate": "06/11/2018"
                    },
                    {
                        "id": 6714,
                        "toPlace": {
                            "id": 2374,
                            "name": "Chiang Mai",
                            "countryId": "TH",
                            "countryName": "Thailand",
                            "translatedName": "Chiang Mai",
                            "translatedCountryName": "Thaïlande",
                            "photographyHolder": {
                                "id": 1318,
                                "photographies": [
                                    {
                                        "id": 604103,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 480,
                                        "originalHeight": 270,
                                        "latitude": 18.7668,
                                        "longitude": 98.9626,
                                        "attribution": null,
                                        "multisized": false,
                                        "pathRelative": true,
                                        "path": "uploads/images/small/MLl0CayizB.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 1,
                        "duration": 4,
                        "fromDate": "06/11/2018",
                        "toDate": "06/15/2018"
                    },
                    {
                        "id": 6715,
                        "toPlace": {
                            "id": 2596,
                            "name": "Guangzhou",
                            "countryId": "CN",
                            "countryName": "China",
                            "translatedName": "Canton",
                            "translatedCountryName": "Chine",
                            "photographyHolder": {
                                "id": 1429,
                                "photographies": [
                                    {
                                        "id": 500364,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 960,
                                        "originalHeight": 540,
                                        "latitude": null,
                                        "longitude": null,
                                        "attribution": {
                                            "id": 500364,
                                            "sourceProvider": "Pixabay",
                                            "sourceName": "Pixabay",
                                            "url": null,
                                            "license": "CC0 1.0 Universal (CC0 1.0)",
                                            "authorUrl": null,
                                            "author": null,
                                            "title": null,
                                            "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                        },
                                        "multisized": true,
                                        "largePath": "uploads/images/large/vMspZ4Sx8d.jpg",
                                        "pathRelative": true,
                                        "mediumPath": "uploads/images/medium/vMspZ4Sx8d.jpg",
                                        "smallPath": "uploads/images/small/vMspZ4Sx8d.jpg",
                                        "thumbnailPath": "uploads/images/thumbnail/vMspZ4Sx8d.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 2,
                        "duration": 3,
                        "fromDate": "06/15/2018",
                        "toDate": "06/18/2018"
                    },
                    {
                        "id": 6716,
                        "toPlace": {
                            "id": 1132,
                            "name": "Paris",
                            "countryId": "FR",
                            "countryName": "France",
                            "translatedName": "Paris",
                            "translatedCountryName": "France",
                            "photographyHolder": {
                                "id": 638,
                               "photographies": [
                                    {
                                        "id": 500131,
                                        "type": "LANDSCAPE",
                                        "origin": "SELF_HOSTED",
                                        "originalWidth": 960,
                                        "originalHeight": 540,
                                        "latitude": null,
                                        "longitude": null,
                                        "attribution": {
                                            "id": 500131,
                                            "sourceProvider": "Pixabay",
                                            "sourceName": "Pixabay",
                                            "url": "https://pixabay.com/en/eiffel-tower-lovely-photo-2810259/",
                                            "license": "CC0 1.0 Universal (CC0 1.0)",
                                            "authorUrl": "pixabay.com/en/users/daviddeolindo22-6606720/",
                                            "author": "daviddeolindo22 / 1 image",
                                            "title": "Eiffel Tower Lovely Photo",
                                            "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/deed.en"
                                        },
                                        "multisized": true,
                                        "largePath": "uploads/images/large/Y03wC0nTwU.jpg",
                                        "pathRelative": true,
                                        "mediumPath": "uploads/images/medium/Y03wC0nTwU.jpg",
                                        "smallPath": "uploads/images/small/Y03wC0nTwU.jpg",
                                        "thumbnailPath": "uploads/images/thumbnail/Y03wC0nTwU.jpg"
                                    }
                                ]
                            }
                        },
                        "actualJourneyInd": 3,
                        "duration": 0,
                        "fromDate": "06/18/2018",
                        "toDate": "06/18/2018"
                    }
                ],
                "price": 1304,
                "lowerPriceBound": 1472,
                "higherPriceBound": 2848,
                "accommodationPackageQuote": {
                    "id": 6,
                    "onBudgetQuote": 122.81,
                    "threeStarsQuote": 177.70999,
                    "fourStarsQuote": 275.64,
                    "fiveStarsQuote": 584.17004
                }
            }
        }
    }


### Build Itinerary [/trip/multidestination/build/{itineraryId}{?withPackage}]

This endpoint will allow you to **build a trip** out of a given **accommodation package type** and an **itinerary id**
This means that while paths and journeys were built neither the accommodations nor the trip entity were built yet and 
they need to be built in. The goal here is to **build the accommodations on top of the new trip entity** with the above 
mentionned **package and itinerary**. 

This endpoint will return the freshly generated trip id and key. When the trip is fully generated, we issue a key to 
ensure that **it can only be modified by its owner**. Keys were thought to safeguard the trip pages as a password do. When
used in our front-end application, they are stored in the local storage of the end-user browser so that if they refresh
page, they will still have access to their trip but if they share this url, the other user won't be able to see this
trip page and therefore won't be able to edit it. In fact, once the trip is generated, every endpoint are safeguarded
by the same key scheme and this is in order to avoid concurrent modifications which could lead to both strange 
behaviors on our side but more importantly, strange behavior as perceived by an end-user even in the case where it 
worked technically correctly.

The `discountPercentage` field **doesn't represent any real world value**. It is just a hashed quantity based on the id 
and the price of this trip that never change (except if the price changes). This can be used as a fake discount 
percentage in front-end application or just bypassed.

If the package isn’t defined for the given trip proposition, or if no accommodation package was previously retrieved, 
(for example if you never used the `withAccommodationPackagesQuote` parameter when you retrieved the itinerary you are 
trying to build) then this request will fail and **end up with a 422 error**. Sometimes, (altough very rarely) the
package is not anymore live because the prices yield since they were proposed. In this case, a **404 will be thrown**
 and the end-user will be asked to choose another trip proposition.

+ Parameters
    + itineraryId: 21 (required, number) -  The id of the selected itinerary.
    + withPackage: FOUR_STARS (required, PackageCategory) - The category of the package selected. can be one of 
    <br/>`ON_BUDGET` : Any unranked or below 3 stars hotel.
    <br/>`THREE_STARS` : Any 3 stars hotel.
    <br/>`FOUR_STARS` : Any 4 stars hotel.
    <br/>`FIVE_STARS` : Any 5 stars hotel.
    <br/>
    
    
### Build Your Itinerary [PUT]

+ Response 200 (application/json)

    {
        "status": "SENT",
        "httpStatus": 201,
        "tokenExpiration": "05/31/2018 00:14:11.9350+00:00",
        "apiCallId": 9125,
        "contents": {
            "trip": {
                "id": 545,
                "key": "QjwUAHqTDQXgPaJryC0R",
                "createdAt": "05/31/2018 01:14",
                "updatedAt": "05/31/2018 01:14",
                "discountPercentage": 65
            },
            "request": {
                "id": 489
            }
        }
    }


               
### Geo Structures [/geo/autocomplete{?query,geoTypes}]
<a name="Geo"></a>

This endpoint can mix up **several types of geo entities** in a single **autocomplete tool**. You 
can select the types of geo entities you are interested in. Currently, only cities and airports are
supported.

There is no other Geo Endpoints but if you need more geo endpoints in order to map your geographic 
content to ours correctly, please feel free to send us a request, we would be delighted to develop 
this feature for you. If you need more detailed information from this endpoint (like latitude and 
longitude for example), feel free to contact us as well.

+ Parameters
    + query: Pari (string) - The search query string
    + geoTypes: DESTINATION,AIRPORT (array[GeoType]) - The type of Geo objects you want to query, it
     can be DESTINATION and/or AIRPORT.
    
<a name="Autocomplete"></a>            
### Autocomplete [GET]
        
+ Response 200 (application/json)

     {
     
        "status": "SENT",
        "httpStatus": 200,
        "tokenExpiration": "05/30/2018 16:43:07.8930+00:00",
        "apiCallId": 9110,
        "contents": {
            "results": [
                {
                    "id": "DE1132",
                    "name": "Paris",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "PAR",
                    "geoType": "DESTINATION"
                },
                {
                    "id": "DE5650",
                    "name": "Parintins",
                    "cityName": "Parintins",
                    "countryName": "Brazil",
                    "iata": "PIN",
                    "geoType": "DESTINATION"
                },
                {
                    "id": "AI1181",
                    "name": "Paris Beauvais Tillé Airport",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "BVA",
                    "geoType": "AIRPORT"
                },
                {
                    "id": "AI1185",
                    "name": "Charles de Gaulle International Airport",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "CDG",
                    "geoType": "AIRPORT"
                },
                {
                    "id": "AI1186",
                    "name": "Paris-Orly Airport",
                    "cityName": "Paris",
                    "countryName": "France",
                    "iata": "ORY",
                    "geoType": "AIRPORT"
                },
                {
                    "id": "AI5418",
                    "name": "Parintins Airport",
                    "cityName": "Parintins",
                    "countryName": "Brazil",
                    "iata": "PIN",
                    "geoType": "AIRPORT"
                }
            ]
        }
    }
            
# Data Structures

## Passenger (object)

- `age`: `19` (number)

## Region (enum[string])
+ `EUROPE` - Europe
+ `ASIA` - Asia
+ `NORTH_AMERICA` - Northern America
+ `SOUTH_AMERICA` - South America
+ `MIDDLE_EAST` - Middle East
+ `OCEANIA` - Oceania
+ `AFRICA` - Africa
+ `INDIA` - India


## GeoType (enum[string])
 + `DESTINATION` - City Type
 + `AIRPORT` - Airport Type

## Tag (enum[string])
 + `CCUL` - CULTURE
 + `CHI` - HISTORIC
 + `CUN` - UNESCO
 + `CFO` - FOOD
 + `CWI` - WINE
 + `COLD` - OLDTOWN
 + `CARC` - ARCHITECTURE
 + `CCAT` - CATHEDRAL
 + `MMUS` - MUSIC
 + `NNAT` - NATURE
 + `NMOU` - MOUNTAIN
 + `NSEA` - SEA
 + `HNIG` - NIGHTLIFE
 + `SGOL` - GOLF
 + `SURF` - SURF
 + `SSK` - SKI
 + `SDIV` - DIVING
 + `TPOP` - POPULAR
 + `TSHO` - SHOPPING
 + `TWO` - WONDER
 + `TCIT` - CITY
 + `TCAP` - CAPITALES
 + `TROM` - ROMANTIC
 + `TCAS` - CASINO
 + `GNE` - NORTHERN_EUROPE
 + `GSA` - SOUTHEAST_ASIA
 + `GEE` - EASTERN_EUROPE
 + `GCAR` - CARAIBES
 + `OFA` - FAMILY
 + `CWB` - WELL_BEING
 + `COB` - ON_BUDGET
 + `CMF` - COMFORT
 + `CCC` - CITY_CENTER            
 
 
## PackageCategory (enum[string])
 + `ON_BUDGET` - Any unranked or below 3 stars hotel.
 + `THREE_STARS` - Any 3 stars hotel.
 + `FOUR_STARS` - Any 4 stars hotel.
 + `FIVE_STARS` - Any 5 stars hotel.

## `TripRequest` (object)

- fromDate: `06/08/2018` (required, string) -
 **Required** - The departure date of the trip.

- toDate: `06/18/2018` (required, string) -
 **Required** - The end date of the trip.

- tags: (array[enum[Tag]]) -
 **Optional** - The tags the itinerary must match. The 4 last tags describe accommodations and not the destinations
 of the itineraries.

- fromPlace: `DE1132` (string) -
 **Required** The starting place of the trip. This might be either an airport or a destination (All Airports of 
this city). The available geographical entities can be retrieved using the [autocomplete endpoint](#Autocomplete).

- toPlace:  `DE1132` (string) -
**Optional** The ending place of the trip. By default, it will be set to `fromPlace` parameter value. This might be
either an airport or a destination (All Airports of this city). The available geographical entities can be retrieved
 using the [autocomplete endpoint](#Autocomplete).

- passengers (array[Passenger]) - 
**Required** The passengers of the trip. This soon will be replaced by a string similar to this one : `A,A,16,4`.
 There must be at least one adult in the passengers array.

- region: ASIA (Region) - **Required** The region in which the trip should take place.

- destinationsCount: `3` (number) - **Required** The exact number of destinations that shall appear in the itineraries.

- flexibleDates: `false` (boolean) - **Optional** Wether the start/end date is flexible (+/- 1 day).

- mustUseDestinations: DE308 (array[string]) - 
**Optional** The ids of the destinations/airports the user wants to visit. The available geographical entities can be
 retrieved using the [autocomplete endpoint](#Autocomplete).
